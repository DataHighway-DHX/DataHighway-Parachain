//! Autogenerated weights for pallet_crowdloan_reward
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Sudips-Laptop.localdomain`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/datahighway-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_crowdloan_reward
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/crowdloan-reward/src/weights.rs
// --template
// .maintain/pallet_weight.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_crowdloan_reward.
pub trait WeightInfo {
	fn start_new_crowdloan(l: u32, ) -> Weight;
	fn update_campaign(l: u32, ) -> Weight;
	fn add_contributer(l: u32, ) -> Weight;
	fn remove_contributer(l: u32, ) -> Weight;
	fn lock_campaign(l: u32, ) -> Weight;
	fn wipe_campaign(l: u32, ) -> Weight;
}

/// Weight functions for `pallet_crowdloan_reward`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Reward CampaignStatus (r:1 w:1)
	// Storage: Reward RewardInfo (r:1 w:1)
	// Storage: Reward Contribution (r:1 w:0)
	/// The range of component `l` is `[1, 100]`.
	fn start_new_crowdloan(l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(23_564_000_u64)
			// Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(4_000_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:1)
	// Storage: Reward CampaignStatus (r:1 w:0)
	// Storage: Reward Contribution (r:1 w:0)
	/// The range of component `l` is `[1, 100]`.
	fn update_campaign(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(25_741_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:1 w:0)
	// Storage: Reward Contribution (r:1 w:1)
	/// The range of component `l` is `[1, 100]`.
	fn add_contributer(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(24_508_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:1 w:0)
	// Storage: Reward Contribution (r:1 w:1)
	/// The range of component `l` is `[1, 100]`.
	fn remove_contributer(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(24_148_000_u64)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:1 w:1)
	/// The range of component `l` is `[0, 100]`.
	fn lock_campaign(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(21_288_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:0 w:1)
	/// The range of component `l` is `[0, 100]`.
	fn wipe_campaign(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(18_534_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

impl WeightInfo for () {
	// Storage: Reward CampaignStatus (r:1 w:1)
	// Storage: Reward RewardInfo (r:1 w:1)
	// Storage: Reward Contribution (r:1 w:0)
	/// The range of component `l` is `[1, 100]`.
	fn start_new_crowdloan(l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(23_564_000_u64)
			// Standard Error: 1_000
			.saturating_add(Weight::from_ref_time(4_000_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:1)
	// Storage: Reward CampaignStatus (r:1 w:0)
	// Storage: Reward Contribution (r:1 w:0)
	/// The range of component `l` is `[1, 100]`.
	fn update_campaign(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(25_741_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:1 w:0)
	// Storage: Reward Contribution (r:1 w:1)
	/// The range of component `l` is `[1, 100]`.
	fn add_contributer(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(24_508_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:1 w:0)
	// Storage: Reward Contribution (r:1 w:1)
	/// The range of component `l` is `[1, 100]`.
	fn remove_contributer(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(24_148_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:1 w:1)
	/// The range of component `l` is `[0, 100]`.
	fn lock_campaign(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(21_288_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Reward RewardInfo (r:1 w:0)
	// Storage: Reward CampaignStatus (r:0 w:1)
	/// The range of component `l` is `[0, 100]`.
	fn wipe_campaign(_l: u32, ) -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(18_534_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}